#include <iostream>
using namespace std;

int* list= NULL; // létrehozunk egy pointeret ami egy  listán van és egyenlő nullával, nincs bennet semmi .
int elemSzam; // megadjuk hogy az elemszám váltózó számokat takar

bool legyenNulla(){ // létrehozunk egy függvényt aminek nincs paraméterlistája
    if(elemSzam==0){ // hivatkozunk az elemszámra hogy ha nulla akkor térjen vissza igazzal
        return true;
    }
    return false;  // ha nem akkor hamissal térjen vissza
}
void törliAzElemet(){ // létrehozunk rgy függvényt aminek van neve de nincs paraméterlistája
    if(elemSzam!=0||list!= NULL){ // ha az elemszám nem egyenlö nullával , a lista sem egyenlő nullával  
        delete[]list; // akkor törölje a listát
        elemSzam = 0; // elemszám egyenlő nullával
    }
}

void rakdUtolsonak(int ujElem){ // létrehozunk egy függvényt a inek van neve és paraméter listája ami egy új változó
    int *listaPointer = new int[elemSzam+1]; // a listapointert enyenlövé tesszük az uj elemszámunkal ami eggyel nagyobb
    for (int i = 0; i < elemSzam; ++i) { // egy ciklussal bejárom a listámat az utolsó elemig
        listaPointer[i]=list[i]; // a listapointeremet egyenlővé teszem a listámmal
    }
    listaPointer[elemSzam]=ujElem; // a listapointerem elemszáma egyenlő az új elememmel
    if(list){delete[]list;} // törlöm a régi listát
    list=listaPointer; // egyenlővé teszem a listát a listapointerrel
    elemSzam++; // növelem az elemszámot eggyel

}

void rakdBeElsonek(int ujElem){
    int *listaPointer = new int[elemSzam+1];
    listaPointer[0]=ujElem;
    for (int i = 0; i < elemSzam; ++i) {
        listaPointer[i+1]=list[i];
    }
    if(list){delete[]list;}
    list=listaPointer;
    elemSzam++;
}

bool changeAtIndex(int index, int newElement){
    if(index<elementNum&&index>=0){
        list[index]=newElement;
        return true;
    }
    else{ return false;}
}

bool changeTwoElements(int firstIndex, int secondIndex){
    if(firstIndex>=0&&firstIndex<elementNum&&
            secondIndex>=0&&secondIndex<elementNum){
        int temp = list[firstIndex];
        list[firstIndex]=list[secondIndex];
        list[secondIndex]=temp;
        return true;
    }
    return false;
}

bool putToIndex(int index,int newElement){
    if(index<0){
        return false;
    }
    else if(index==0){putFirst(newElement);}
    else if(index==elementNum){putLast(newElement);}
    else if(index>elementNum){
        int *tempList = new int[index+1];
        for (int i = 0; i < elementNum; ++i) {
            tempList[i]=list[i];
        }
        for (int j = elementNum; j <index ; ++j) {
            tempList[j]=0;
        }
        tempList[index]=newElement;
        if(list){delete[]list;}
        list=tempList;
        elementNum=index+1;

    }
    else{
        int *tempList = new int[elementNum+1];
        for (int i = 0; i < index; ++i) {
            tempList[i]=list[i];
        }
        tempList[index]=newElement;
        for (int j = index+1; j < elementNum+1; ++j) {
            tempList[j] = list[j-1];
        }
        if(list){delete[]list;}
        list=tempList;
        elementNum++;
    }
    return true;
}

void exampleSeparator(){
    cout<<'\n'<<"-----||-----"<<"\n\n";
}

void printListElementsToConsole(){
    for (int i = 0; i < elementNum; ++i) {
        cout<<"The element at ["<<i<<"] is = "<<list[i]<<endl;
    }
    exampleSeparator();

}




int main() {
    for (int i = 0; i < 10; ++i) {
        putLast(i);
    }

    printListElementsToConsole();


    for (int j = 0; j < 10; ++j) {
        putFirst(j+10);
    }

    printListElementsToConsole();

    putToIndex(24,145);

    printListElementsToConsole();

    putToIndex(22,8765);

    printListElementsToConsole();

    changeAtIndex(24,100);

    printListElementsToConsole();

    changeTwoElements(22,25);

    printListElementsToConsole();

    deleteAllElements();

    std::cout << "Success!" << std::endl;
    return 0;
}
